<?php
module_load_include('inc', basename(__DIR__), basename(__DIR__) . '.classes');

/**
 * Implements hook_menu().
 */
function nytech_master_menu() {

  $items['admin/config/development/settings'] = array(
    'title' => 'Site Settings',
    'page callback' => 'screen_site_settings',
    'access callback' => true,
    'file' => 'nytech_master.pages.inc',
    'file path' => drupal_get_path('module', 'nytech_master'),
  );

  $items['home'] = array(
    'title' => 'Start',
    'page callback' => 'api_home',
    'access callback' => true,
    'file' => 'nytech_master.pages.inc',
    'file path' => drupal_get_path('module', 'nytech_master'),
  );

  return $items;
}

function nytech_master_theme($existing, $type, $theme, $path) {
  $theme = [];

  $item = new NyTechTheme('nytech_modal_fake', __DIR__);
  $theme = $item->item($theme);

  $item = new NyTechTheme('nytech_item_simple', __DIR__);
  $theme = $item->item($theme);

  return $theme;
}

function is_admin() {
  $access = false;
  if(user_is_logged_in()) {
    global $user;
    if(in_array('administrator', $user->roles)) {
      $access = true;
    }
  }
  return $access;
}

function nytech_master_entity_presave($entity, $type) {
  if($type == 'example') {

  }
}

class NyTechPhone {
  static function pretty_phone($phone) {
    $phone = preg_replace('/^\+?1|\|1|\D/', '', ($phone));;
    $phone = NyTechPhone::clean_phone($phone);
    $phone = preg_replace("/([0-9]{3})([0-9]{3})([0-9]{4})/", "($1) $2-$3", $phone);
    return $phone;
  }

  static function clean_phone($phone) {
    $phone = preg_replace('/[^0-9]/', '', $phone);
    return $phone;
  }

  static function pretty_phone_dashes($phone) {
    $phone = preg_replace('/^\+?1|\|1|\D/', '', ($phone));;
    $phone = NyTechPhone::clean_phone($phone);
    $phone = preg_replace("/^1?(\d{3})(\d{3})(\d{4})$/", "$1-$2-$3", $phone);
    return $phone;
  }
}

function dump($var) {
  var_dump($var);
}

function dumpk($var) {
  var_dump($var);
  exit;
}

class NyTechLogErrors {
  static function log($vars, $type = 'NyTech') {
    watchdog($type, '@vars',  array('vars' => print_r([$vars,], true)), WATCHDOG_NOTICE);
  }
}

function auth_goto($path) {
  if(user_is_logged_in()) {
    drupal_goto($path);
  }
}

function non_auth_goto($path) {
  if(!user_is_logged_in()) {
    drupal_goto($path);
  }
}

function user_load_by_phone($phone) {
  $user_id = search_user_by_phone($phone);
  if($user_id != false) {
    return user_load($user_id);
  }
  return false;
}

function search_user_by_phone($phone) {
  $phone = NyTechPhone::pretty_phone($phone);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_user_phone', 'value', $phone, '=')
    ->addMetaData('account', user_load(1));
  $result = $query->execute();
  if (isset($result['user'])) {
    $ids = array_keys($result['user']);
    $result = array_pop($ids);
  } else {
    $result = false;
  }
  return $result;
}

class NyTechMenu {
  public $values;
  public $item;

  function __construct($module_dir) {
    $this->values = [
      'module_name' => basename($module_dir),
    ];
    $item = [
      'title' => 'Page',
      'page callback' => '',
      'access callback' => 'user_is_logged_in',
      'file' => $this->values['module_name'] . '.pages.inc',
      'file path' => drupal_get_path('module', $this->values['module_name']),
    ];
    $this->item = $item;
  }

  /*
   * Static values
   */
  public function path($var) {
    $this->values['key'] = $var;
  }

  public function title($var) {
    $this->item['title'] = $var;
  }

  public function page_callback($var) {
    $this->item['page callback'] = $var;
  }

  public function access_callback($var) {
    $item = $this->item;
    $item['access callback'] = $var;
    $this->item = $item;
  }

  /*
   * Arguments
   */
  public function page_arguments($args) {
    $item = $this->item;
    $item['page arguments'] = $args;
    $this->item = $item;
  }

  public function access_arguments($args) {
    $item = $this->item;
    $item['access arguments'] = $args;
    $this->item = $item;
  }

  /*
   * Auto assignments (no input).
   */
  public function json_output() {
    $item = $this->item;
    $item['delivery callback'] = 'drupal_json_output';
    $this->item = $item;
  }

  public function item($items) {
    $items[$this->values['key']] = $this->item;
    return $items;
  }
}

class NyTechTheme {
  function __construct($key, $module_dir) {
    $this->values = [
      'key' => $key,
      'module_name' => basename($module_dir),
    ];
    $item = [
      'template' => 'nytech--' . $this->values['key'],
      'path' => drupal_get_path('module', $this->values['module_name']) . '/templates',
    ];
    $this->item = $item;
  }

  public function item($theme) {
    $theme[$this->values['key']] = $this->item;
    return $theme;
  }
}

class NyTechSESSION {
  public $session;

  function __construct() {
    if(isset($_SESSION)) {
      $this->session = $_SESSION;
    }
  }

  public function start() {
    if(!isset($this->session)) {
      session_start();
      if(isset($_SESSION)) {
        $this->session = $_SESSION;
      }
    }
  }

  public function get_value($key) {
    if(isset($this->session)) {
      if(key_exists($this->session[$key])) {
        return $this->session[$key];
      }
    }
  }

  public function delete_value($key) {
    if(isset($this->session)) {
      if(key_exists($key, $this->session)) {
        unset($this->session);
        $_SESSION = $this->session;
      }
    }
  }

  public function set_value($key, $value) {
    if(isset($this->session)) {
      if(key_exists($key, $this->session)) {
        $this->session[$key] = $value;
        $_SESSION = $this->session;
      }
    }
  }

  public function destroy() {
    if(isset($_SESSION)) {
      $_SESSION = false;
      session_destroy();
    }

  }

}

class NyTechPath {

  function __construct($type = false) {
    switch ($type) {
      case 'base':
        $url = $this->base();
        break;
      default:
        $url = $this->root();
        break;
    }
    $this->url = $url;
  }
  private function base() {
    global $base_url;
    return base_path();
  }

  private function site() {
    global $base_url;
    return $base_url;
  }

  private function root() {
    global $base_url;
    return $base_url;
  }
}


function timeAgo($timestamp) {
  $timeDifference = time() - $timestamp;

  if ($timeDifference < 1) {
    return 'just now';
  }

  $timeUnits = array(
    'year' => 60 * 60 * 24 * 365,
    'month' => 60 * 60 * 24 * 30,
    'week' => 60 * 60 * 24 * 7,
    'day' => 60 * 60 * 24,
    'hour' => 60 * 60,
    'minute' => 60,
    'second' => 1
  );

  foreach ($timeUnits as $unitName => $unitSeconds) {
    if ($timeDifference >= $unitSeconds) {
      $unitValue = floor($timeDifference / $unitSeconds);
      $plural = ($unitValue > 1) ? 's' : '';
      return "{$unitValue} {$unitName}{$plural} ago";
    }
  }
}

function shorten($string, $chars = 140) {
  $output = strip_tags($string);
  $output = mb_substr($output, 0, $chars);
  return $output;
}

class NyTechPathMatch {
  public $path;
  public $patterns;
  public $report;
  public $has_match;

  function __construct($path) {
    $this->path($path);
    $this->has_match = false;
    $this->patterns = [];
    $this->report = [];
  }

  private function path($path) {
    $this->path = $this->process_pattern($path);
  }

  private function process_pattern($pattern, $id = false) {
    $parts = explode('/', $pattern);
    $pattern_array = [
      'pattern' => $pattern,
      'parts' => $parts,
      'count' => count($parts),
    ];

    if($id !== false) {
      $pattern_array[$id] = $pattern_array;
    }

    return $pattern_array;
  }

  public function add_pattern($pattern) {
    $patterns       = $this->patterns;
    $new_pattern    = $this->process_pattern($pattern);
    array_push($patterns, $new_pattern);
    $this->patterns = $patterns;
  }

  public function go() {
    $report = $this->report;
    foreach($this->patterns as $key => $pattern) {
      $report[$key] = $this->report_pattern($pattern);
    }

    $this->report = $report;
  }

  private function report_pattern($pattern) {
    $access = false;
    $array = [
      'pattern' => $pattern['pattern'],
      'access' => $access,
    ];
    if($this->path['count'] === $pattern['count']) {
      $access = true;
      foreach($pattern['parts'] as $key =>  $part) {
        if($part !== '*') {
          if($this->path['parts'][$key] !== $part) {
            $access = false;
          }
        }
      }
    }

    $array['access'] = $access;

    $this->set_match_true($access);

    return $array;
  }

  private function set_match_true($access) {
    if($access === true) {
      $this->has_match = true;
    }
  }

}

class NyTechFileMove {
  function __construct($file) {
    $this->tmp_file = $file;
    $this->set_file_type($file);
  }

  private function set_file_type($file) {
    if(!empty($file->filemime)) {
      $array = explode('/', $file->filemime);
      $this->file_type = $array[0];
      $this->file_ext  = $array[1];
    }
  }

  public function move($destination) {
    if(!empty($destination)) {
      $destination = 'private://data/' . $destination;
      $file = $this->tmp_file;
      $file->filename = $this->tmp_file->uuid . '.' . $this->file_ext;
      $file->status = FILE_STATUS_PERMANENT;
      file_prepare_directory($destination, FILE_CREATE_DIRECTORY|FILE_MODIFY_PERMISSIONS);
      $this->file = file_move($file, $destination, FILE_EXISTS_REPLACE);
    }
  }

  public function file_array() {
    if(!empty($this->file)) {
      return (array) $this->file;
    }
  }
}

class NyTechGetUuidByEntityID {
  public $uuid;
  public $entity;
  function __construct($entity_type, $entity_id) {
    $this->uuid = false;
    $this->entity = false;

    $query = 'SELECT e.* FROM {eck_' . $entity_type . '} e WHERE e.id = :entity_id';
    $args = [
      ':entity_id' => $entity_id,
    ];
    $q = db_query($query, $args);
    foreach($q as $row) {
      $this->entity = $row;
      $this->uuid = $row->uuid;
    }
  }
}

function build_uuid_dir_path($array) {
  $pieces = [];
  foreach($array as $key => $value) {
    $entity = new NyTechGetUuidByEntityID($key, $value);
    if(!empty($entity->uuid)) {
      $pieces[] = $entity->uuid;
    }
  }
  return implode('/', $pieces);
}

class NyTechFieldImg {
  public $entity_type;
  public $entity;
  public $field_name;
  public $image_style;
  public $field;
  public $output;
  public $output_thumbnail;
  public $urls;
  public $fids;

  function __construct($entity_type, $entity, $field_name, $image_style) {
    $this->entity_type = $entity_type;
    $this->entity = $entity;
    $this->field_name = $field_name;
    $this->image_style = $image_style;
    $this->field = field_get_items($this->entity_type, $this->entity, $this->field_name);
    $this->fids = false;
  }

  public function output() {
    $output = null;
    $output_thumbnail = null;
    $urls = [];
    $fids = [];
    if(is_array($this->field)) {
      foreach($this->field as $key => $item) {
        // Set output;
        $fids[] = (int) $item['fid'];
        $field_item = field_view_value($this->entity_type, $this->entity, $this->field_name, $item, array(
          'type' => 'image',
          'settings' => array(
            'image_style' => $this->image_style,
          ),
        ));
        $output .= drupal_render($field_item);

        $field_item_thumbnail = field_view_value($this->entity_type, $this->entity, $this->field_name, $item, array(
          'type' => 'image',
          'settings' => array(
            'image_style' => 'default',
          ),
        ));
        $output_thumbnail .= drupal_render($field_item_thumbnail);

        // Set image url;
        $urls[$key] = file_create_url($item['uri']);
      }
    } else {
      // Get field info.
      $field = field_info_field($this->field_name);

      if (isset($field['settings']['default_image']) && !empty($field['settings']['default_image']['fid'])) {
        $default_fid = $field['settings']['default_image']['fid'];
        $file = file_load($default_fid);
        $default_image_uri = $file->uri;
        $default_image_url = file_create_url($default_image_uri);
        $urls = [$default_image_url];
        $output = theme('image_style', array('style_name' => 'default', 'path' => $default_image_url));
      }
    }
    $this->urls = $urls;
    $this->output = $output;
    $this->output_thumbnail = $output_thumbnail;
    $this->fids = $fids;
  }
}

class NyTechImageFormSubmit {

  public $file;

  function __construct($fidNew, $fidOld = false, $destination) {
    if($fidNew == $fidOld) {
      $this->file = (array) file_load($fidOld);
    } else {
      // Remove old file
      $fileOld = file_load($fidOld);
      file_delete($fileOld);

      // Save new file
      $fileNew = file_load($fidNew);
      $fileMoved = new NyTechFileMove($fileNew);
      $fileMoved->move($destination);
      $this->file = $fileMoved->file_array();
    }
  }

  public function file() {
    return $this->file;
  }
}
